server:
  port: 8082
  servlet:
    context-path: /

# Enable debug logging for better diagnostics
logging:
  level:
    root: INFO
    org.springframework: DEBUG
    org.hibernate: INFO
    com.cloudAwsDocker: DEBUG
    com.cloudAwsDocker.exception.GlobalExceptionHandler: ERROR
    org.springframework.web: ERROR

spring:
  application:
    name: cloud-aws-docker
  main:
    allow-bean-definition-overriding: true

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

  datasource:
    url: jdbc:mysql://localhost:3306/cloud_aws_docker?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
    username: root
    password: 12Rose#2323
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      connection-timeout: 30000
      maximum-pool-size: 10
      minimum-idle: 5
      max-lifetime: 1800000
      leak-detection-threshold: 60000
      initialization-fail-timeout: 1
      connection-init-sql: SELECT 1
      pool-name: HikariCP
      auto-commit: true
      register-mbeans: false

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
    open-in-view: false
  sql:
    init:
      mode: never  # Disable data source initialization since we're using JPA for schema management

  mail:
    host: ${SMTP_HOST:}
    port: ${SMTP_PORT:587}
    username: ${SMTP_USERNAME:}
    password: ${SMTP_PASSWORD:}
    protocol: smtp
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000

  jwt:
    secret: your_jwt_secret_key_here_make_it_very_long_and_secure
    expiration: 86400000 # 24 hours in milliseconds

  mvc:
    cors:
      allowed-origins: "*"
      allowed-methods: "*"
      allowed-headers: "*"

  security:
    require-ssl: false
    headers:
      frame-options: DENY
      xss-protection: 1; mode=block
      content-security-policy: default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';
      referrer-policy: no-referrer
      feature-policy: geolocation 'none'; midi 'none'; sync-xhr 'none'; microphone 'none'; camera 'none'; magnetometer 'none'; gyroscope 'none'; fullscreen 'self'; payment 'none'




management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true

# File upload configuration
file:
  upload-dir: ${user.home}/app/uploads
  max-file-size: 10MB
  max-request-size: 10MB
  enable-uploads: true

app:
  api:
    version: v1
  cors:
    allowed-origins: "*"
  jwt:
    secret: YvM3wrUKZ98TTgDEQakbOZyERLmfSTNmtFeUG8YMXv/VszKUC6N6dUcp7u8OarYZ
    expiration-ms: 86400000  # 24 hours
  
  # Email Configuration
  email:
    from: no-reply@yourapp.com
    name: Your App

  # SMS Configuration
  sms:
    senderId: YOURAPP

  # OTP Configuration
  otp:
    test-mode: false  # Set to true to log OTPs instead of sending them
    length: 6
    expiration-minutes: 15

  # Email Server Configuration
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${EMAIL_USERNAME:}
    password: ${EMAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
        transport:
          protocol: smtp
          rset: true

# AWS Configuration
aws:
  accessKeyId: ${AWS_ACCESS_KEY_ID:}
  secretKey: ${AWS_SECRET_ACCESS_KEY:}
  region: ap-south-1

# JWT Configuration (for backward compatibility)
jwt:
  secret: ${app.jwt.secret}
  expiration-ms: ${app.jwt.expiration-ms}

security:
  auth:
    whitelist:
      - /api/v1/auth/**
      - /v3/api-docs/**
      - /swagger-ui/**
      - /swagger-ui.html
      - /swagger-resources/**
      - /webjars/**
      - /actuator/health

  jwt:
    header: Authorization
    prefix: Bearer
    token-validity-in-seconds: 86400
    token-validity-in-seconds-for-remember-me: 2592000
  file:
      upload-dir: ${user.home}/Downloads